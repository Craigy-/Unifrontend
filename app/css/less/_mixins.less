// Mixins
// Some sources from: https://github.com/twbs/bootstrap/blob/master/less/mixins.less

// Clearfix
.clearfix() when (default()) {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Center-align a block level element
.center-block(@display: block) when (default()) {
  display: @display;
  margin-left: auto;
  margin-right: auto;
}

// Center-align a block level content
.center-block-content(@display: block) when (default()) {
  display: @display;
  overflow: hidden;
  position: relative;
  width: 100%;

  > div {
    display: @display;
    position: relative;
    float: left;
    left: 50%;

    > div {
      display: @display;
      position: relative;
      float: left;
      right: 50%;
    }
  }
}

// Justify-align a block level content
.justify-block-content(@width: auto; @line-height: @line-height-base) when (default()) {
  line-height: 0;
  letter-spacing: -1px;
  text-align: justify;

  &:after {
    display: inline-block;
    visibility: hidden;
    width: 100%;
    content: ".";
  }

  > * {
    display: inline-block;
    .set-value(width; @width);
    line-height: @line-height;
    letter-spacing: normal;
    vertical-align: top;
  }
}

// Vertical center-align a block level content
.middle-block-content(@display: block) when (default()) {
  display: @display;
  position: relative;

  > * {
    display: @display;
    position: absolute;
    top: 50%;
    left: 0;
    .translate(0, -50%);
  }
}

// Universal value setter
.set-value_(@property; @value; @responsive: @isresponsive) when not (@value = true) and not (@value = false) {
  // Convert some absolute values (pt, pc, in) to pixels
  .converter(@v) when (isunit(@value, pt)), (isunit(@value, pc)), (isunit(@value, in)) {
    @fixed-value: convert(@v, px);
  }
  .converter(@v) when (default()) {
    @fixed-value: @v;
  }
  .converter(@value);

  // Set non-unit and pixel values
  .setter(@p; @v) when (isnumber(@v)) and (~'' = get-unit(@v)), (ispixel(@v)) {
    & when (@responsive) {
      @{p}+_: unit((@v / @font-size-base), rem);
    }
    & when not (@responsive) {
      @{p}+_: unit(@v, px);
    }
  }
  // Set all other values
  .setter(@p; @v) when (default()) {
    @{p}+_: @v;
  }
  .setter(@property; @fixed-value);

  // Font support
  & when (@property = font) {
    @check: ~`function(){var v="@{value}";return !!v.match(/\//)}()`;
    & when (@check) {
      @v1-value: ~`function(){var v="@{value}";return parseFloat(v=v.replace(/^(\d+).*\/(\d+).*$/, '$1'))}()`;
      @v1-unit: ~`function(){var v="@{value}";return v=v.replace(/^\d+(.*)\/\d+(.*)$/, '$1')}()`;
      @v2-value: ~`function(){var v="@{value}";return parseFloat(v=v.replace(/^(\d+).*\/(\d+).*$/, '$2'))}()`;
      @v2-unit: ~`function(){var v="@{value}";return v=v.replace(/^\d+(.*)\/\d+(.*)$/, '$2')}()`;
      .font-size(unit(@v1-value, @v1-unit) @responsive; unit(@v2-value, @v2-unit) @responsive); // such record will not convert a number of values (like '0 0 10 0')
    }
  }
}
.set-value(@args...) {
  .set-responsive(@p; @v) when (extract(@v, length(@v)) = true), (extract(@v, length(@v)) = false) {
    @responsive: extract(@v, length(@v));
  }
  .set-responsive(@p; @v) when (default()) {
    .set-responsive-default(@p) when (@p = font), (@p = font-size), (@p = line-height), (@p = letter-spacing) {
      @responsive: @isfontsresponsive;
    }
    .set-responsive-default(@p) when (default()) {
      @responsive: @isresponsive;
    }
    .set-responsive-default(@p);
  }

  .i; .i(@i: length(@args)) when (@i > 1) {
    .set-responsive(@property; @values);
    .i((@i - 2));
    @property: extract(@args, (@i - 1));
    @values: extract(@args, @i);
    .j(@property; @values; @responsive);
  }
  .j(@p; @v; @r; @j: length(@v)) when (@j > 0) {
    .j(@p; @v; @r; (@j - 1));
    .set-value_(@p; extract(@v, @j); @r);
  }
}

// Sizing shortcuts
.size(@width; @height: auto) {
  .set-value(width; @width; height; @height);
}
.square(@size) {
  .size(@size; @size);
}

// Bottom indents
.margin-bottom(@value) {
  .set-value_(margin-bottom; @value);
}
.padding-bottom(@value) {
  .set-value_(padding-bottom; @value);
}

// Simple equal grid system
.equal-grid(@row-width; @col-number; @col-padding; @responsive: @isresponsive) {
  .clearfix;
  box-sizing: border-box;
  .set-value(margin; 0 (@col-padding / -2) @responsive);

  .col {
    box-sizing: border-box;
    position: relative;
    float: left;
    min-height: 1px;
    .set-value(width; (@row-width / @col-number) @responsive; padding; 0 (@col-padding / 2) @responsive);
  }
}

// Retina image
.image-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
  background-image: url(@file-1x);

  @media
  only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    background-image: url(@file-2x);
    background-size: @width-1x @height-1x;
  }
}

// Responsive image
.image-responsive(@display: block) when (default()) {
  box-sizing: border-box;
  display: @display;
  max-width: 100%;
  height: auto;
}

// Responsive embeds (by Nicolas Gallagher in SUIT CSS)
.embed-responsive(@display: block) when (default()) {
  display: @display;
  overflow: hidden;
  position: relative;
  height: 0;

  .embed-responsive-item,
  iframe,
  embed,
  object,
  video {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    border: 0;
    .square(100%);
  }
}

// Font sizes shortcut
.font-size(@font-size; @line-height: @line-height-base) {
  .set-value(font-size; @font-size; line-height; @line-height);
}

// Stroke text
.text-stroke(@color; @size) {
  @s: unit(@size, px);
  text-shadow: 1px 0 @color, 1px 1px @color, 0 1px @color, -1px 1px @color, -1px 0 @color, -1px -1px @color, 0 -1px @color, 1px -1px @color, 0 0 @s @color, 0 0 @s @color, 0 0 @s @color, 0 0 @s @color, 0 0 @s @color, 0 0 @s @color, 0 0 @s @color, 0 0 @s @color;
}

// Text overflow (requires inline-block or block for proper styling)
.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// CSS image replacement
.text-hide() {
  background-color: transparent;
  border: 0;
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
}

// Placeholder text
.placeholder(@color: @input-color-placeholder; @font-style: @input-font-style-placeholder; @font-weight: @input-font-weight-placeholder; @font-family: @input-font-family-placeholder; @font-size: @input-font-size-placeholder) {
  &:-moz-placeholder {
    opacity: 1;
    font-family: @font-family;
    .set-value(font-size; @font-size);
    font-weight: @font-weight;
    font-style: @font-style;
    color: @color;
  }
  &::-moz-placeholder {
    opacity: 1;
    font-family: @font-family;
    .set-value(font-size; @font-size);
    font-weight: @font-weight;
    font-style: @font-style;
    color: @color;
  }
  &:-ms-input-placeholder {
    font-family: @font-family;
    .set-value(font-size; @font-size);
    font-weight: @font-weight;
    font-style: @font-style;
    color: @color;
  }
  &::-webkit-input-placeholder {
    font-family: @font-family;
    .set-value(font-size; @font-size);
    font-weight: @font-weight;
    font-style: @font-style;
    color: @color;
  }
}

// Resize anything (horizontal, vertical, both)
.resizable(@direction) {
  overflow: auto;
  resize: @direction;
}

// CSS3 Content Columns
.content-columns(@width; @count; @gap) {
  column-width: @width;
  column-count: @count;
  column-gap: @gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
  word-wrap: break-word;
  hyphens: @mode;
}

// Horizontal line
.hr(@background; @margin; @size: 1) {
  background: @background;
  .set-value(height; @size; margin; @margin);
}

// Marker
.marker(@image; @padding; @position: 0 50%) {
  background: url(@image) no-repeat;
  .set-value(background-position; @position; padding; @padding);
}

// Transformations
.transition-transform(@transition) {
  transition: transform @transition;
}
.scale(@ratio) {
  transform: scale(@ratio);
}
.scale(@ratioX; @ratioY) {
  transform: scale(@ratioX, @ratioY);
}
.scaleX(@ratio) {
  transform: scaleX(@ratio);
}
.scaleY(@ratio) {
  transform: scaleY(@ratio);
}
.skew(@x; @y) {
  transform: skew(@x, @y);
}
.translate(@x; @y) {
  transform: translate(@x, @y);
}
.translate3d(@x; @y; @z) {
  transform: translate3d(@x, @y, @z);
}
.rotate(@degrees) {
  transform: rotate(@degrees);
}
.rotateX(@degrees) {
  transform: rotateX(@degrees);
}
.rotateY(@degrees) {
  transform: rotateY(@degrees);
}

// Gradients
#gradient {
  .horizontal(@startColor: #555555; @endColor: #333333) {
    background-color: @endColor;
    background-image: linear-gradient(to right, @startColor, @endColor);
    background-repeat: repeat-x;
  }
  .vertical(@startColor: #555555; @endColor: #333333) {
    background-color: @endColor;
    background-image: linear-gradient(to bottom, @startColor, @endColor);
    background-repeat: repeat-x;
  }
  .directional(@startColor: #555555; @endColor: #333333; @deg: 45deg) {
    background-color: @endColor;
    background-repeat: repeat-x;
    background-image: linear-gradient(@deg, @startColor, @endColor);
  }
  .horizontal-three-colors(@startColor: #00B3EE; @midColor: #7A43B6; @colorStop: 50%; @endColor: #C3325F) {
    background-color: mix(@midColor, @endColor, 80%);
    background-image: linear-gradient(to right, @startColor, @midColor @colorStop, @endColor);
    background-repeat: no-repeat;
  }
  .vertical-three-colors(@startColor: #00B3EE; @midColor: #7A43B6; @colorStop: 50%; @endColor: #C3325F) {
    background-color: mix(@midColor, @endColor, 80%);
    background-image: linear-gradient(@startColor, @midColor @colorStop, @endColor);
    background-repeat: no-repeat;
  }
  .radial(@innerColor: #555555; @outerColor: #333333) {
    background-color: @outerColor;
    background-repeat: no-repeat;
  }
  .striped(@color: #555555; @angle: 45deg) {
    background-color: @color;
    background-image: linear-gradient(@angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
  }
}

// Loops (by seven-phases-max in less.curious)
.for(@i; @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1; @n)}
.for(@i; @n) when not (@i = @n)  {
  .for((@i + (@n - @i) / abs(@n - @i)); @n);
}
.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}